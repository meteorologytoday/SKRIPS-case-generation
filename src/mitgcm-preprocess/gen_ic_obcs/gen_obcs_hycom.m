function gen_obcs_hycom(bnd, thickness, corner_island_flag, grid_dir, mask_dir, hycom_data_dir, output_dir, nrec, target_date)
%% `bnd`            : Side of the boundary. Accepting 'north', 'south', 'west', 'east'.
%% `corner_island_flag` : If adding corner island or not. 0 = do not add. 1 = add
%% `thickness`    : The thickness of the oundary layer in terms of the number of model grids
%% `grid_dir`       : should contain the file grid.mat
%% `mask_dir`       : should contain mask files generated by mitgcm
%% `hycom_data_dir` : should contain the initial condition mat file
%% `output_dir`     : the output directory
%% `nrec`           : the position of the record number for output (because the
%%                    boundary condition files is a sequence of binary data)
%% `target_date`    : should be a formatted string `yyyy-mm-dd_hh`

    run('pathdef.m');
    FMT_json = read_json('../FMT.json');
    fmt = FMT_json.fmt;
    Ieee = FMT_json.Ieee;
    
    grid_file = sprintf('%s/grid.mat', grid_dir);
    fprintf('Loading grid file: %s\n', grid_file);
    gd = load(grid_file);

    nxc = length(gd.xc);
    nyc = length(gd.yc);
    nzc = length(gd.zc);

    % HYCOM outputs
    ic_file = sprintf('%s/hycom_%s.mat', hycom_data_dir, target_date);
    fprintf('Loading initial condition data file: %s\n', ic_file);
    D = load(ic_file);
    D = D.D;

    hycom_lon = D.Longitude;
    hycom_lat = D.Latitude;
    hycom_z = D.Depth;
    hycom_time = D.Date;
    hycomu = D.water_u;
    hycomv = D.water_v;
    hycomt = D.water_temp;
    hycoms = D.salinity;

   
    if strcmp(bnd, 'north') == 1
        idx_lon = 1:nxc;
        idx_lat = (nyc-thickness+1):(nyc-thickness+1);
        OB = ones(nxc, 1) * thickness;

    elseif strcmp(bnd, 'south') == 1
        idx_lon = 1:nxc;
        idx_lat = thickness:thickness;
        OB = ones(nxc, 1) * thickness;

    elseif strcmp(bnd, 'west') == 1
        idx_lon = thickness:thickness;
        idx_lat = 1:nyc;
        OB = ones(nyc, 1) * thickness;

    elseif strcmp(bnd, 'east') == 1
        idx_lon = (nxc-thickness+1):(nxc-thickness+1);
        idx_lat = 1:nyc;
        OB = ones(nyc, 1) * thickness;
    else
        error('Unknown boundary name: %s', bnd);
    end


    if corner_island_flag == 1
        OB(1) = 0;
        OB(end) = 0;
    end

    % Extract HYCOM fields at this time
    varnames = {'T', 'S', 'U', 'V'};
    vars = {hycomt, hycoms, hycomu, hycomv};
    maskchk = [];    
    interpolated_vars = {};
 
    for i = 1:length(varnames)
        varname = varnames{i};
        var = vars{i};

        fprintf('Processing variable: %s\n', varname);

        % Some details about boundaries

        bnd_xc = gd.xc(idx_lon);
        bnd_yc = gd.yc(idx_lat);
        bnd_xf = gd.xf(idx_lon);
        bnd_yf = gd.yf(idx_lat);
        bnd_zc = gd.zc;
        
        [interpolated_var, ~, ~, ~] = hycom2modelgrid(varname, var, hycom_lon, hycom_lat, hycom_z, bnd_xc, bnd_yc, bnd_xf, bnd_yf, bnd_zc, mask_dir, idx_lon, idx_lat);

        output_bin_file = sprintf('%s/hycom_%s_%s.bin', output_dir, varname, target_date);
        fprintf('Writing variable %s to file %s\n', varname, output_bin_file);
        wrslice(output_bin_file, interpolated_var, nrec, fmt, Ieee);
    
        fprintf('Check if we still have missing data...\n');
        [status, Tmsk, Pmsk] = check3dmask(varname, output_bin_file, mask_dir, 1, gd, fmt, Ieee);

        if (status ~= 0)
            fprintf('Warning: There are mismatches of the variable %s\n', varname);

            var_err_chk.Tmsk = Tmsk;
            var_err_chk.Pmsk = Pmsk;
            output_err_chk_file = sprintf('%s/ch3ck3dmask_err_%s.mat', output_dir, varname);
            fprintf('Warning: Saving the data for error checking to file %s\n', output_err_chk_file);
            save(output_err_chk_file, 'var_err_chk');
            
        else
            fprintf('No missing data found.\n');
        end

        OB_idx = find(OB~=0);

        
        % Assign row by row or column by colmn
        % This part is tedious because the location
        % specification is complicated
        % Please refer to:
        %   https://mitgcm.readthedocs.io/en/latest/phys_pkgs/obcs.html

            
        clear OB_data;
        if strcmp(bnd, 'north') == 1
            OB_data = zeros(nxc, nzc);
            for i = OB_idx
                OB_data(i, :) = interpolated_var(i, 1, :);
            end

        elseif strcmp(bnd, 'south') == 1
            OB_data = zeros(nxc, nzc);
            for i = OB_idx
                if strcmp(varname, 'V') ~= 1  % Other than V
                    OB_data(i, :) = interpolated_var(i, 1, :);
                else
                    OB_data(i, :) = interpolated_var(i, 2, :);
                end 
            end

        elseif strcmp(bnd, 'east') == 1
            OB_data = zeros(nyc, nzc);
            for j = OB_idx
                OB_data(:, j) = interpolated_var(1, j, :);
            end

        elseif strcmp(bnd, 'west') == 1
            OB_data = zeros(nyc, nzc);
            for j = OB_idx
                if strcmp(varname, 'U') ~= 1 % Other than U
                    OB_data(:, j) = interpolated_var(1, j, :);
                else
                    OB_data(:, j) = interpolated_var(2, j, :);
                end 
            end
        end

    
        output_file = sprintf('%s/Rs_%s_obcs_%s.bin', output_dir, varname, bnd);
        fprintf('Output file: %s\n', output_file);
        wrslice(output_file, OB_data, nrec, fmt, Ieee);

    end

end
